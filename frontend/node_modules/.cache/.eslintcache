[{"E:\\image\\Sentiment-analysis-Web\\src\\index.js":"1","E:\\image\\Sentiment-analysis-Web\\src\\App.js":"2","E:\\image\\Sentiment-analysis-Web\\src\\reportWebVitals.js":"3","E:\\image\\Sentiment-analysis-Web\\src\\Components\\Header\\Header.jsx":"4","E:\\image\\Sentiment-analysis-Web\\src\\Containers\\Main\\Main.jsx":"5","E:\\image\\Sentiment-analysis-Web\\src\\Containers\\Form\\Form.jsx":"6"},{"size":494,"mtime":1682238844337,"results":"7","hashOfConfig":"8"},{"size":289,"mtime":1682238844273,"results":"9","hashOfConfig":"8"},{"size":375,"mtime":1682238844342,"results":"10","hashOfConfig":"8"},{"size":215,"mtime":1682238844278,"results":"11","hashOfConfig":"8"},{"size":1383,"mtime":1682238844282,"results":"12","hashOfConfig":"8"},{"size":5607,"mtime":1682238844281,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"aqdznu",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"E:\\image\\Sentiment-analysis-Web\\src\\index.js",[],"E:\\image\\Sentiment-analysis-Web\\src\\App.js",[],"E:\\image\\Sentiment-analysis-Web\\src\\reportWebVitals.js",[],"E:\\image\\Sentiment-analysis-Web\\src\\Components\\Header\\Header.jsx",[],"E:\\image\\Sentiment-analysis-Web\\src\\Containers\\Main\\Main.jsx",["28","29"],"import Img from \"../../assests/ai.jpg\";\r\nimport Form from \"../Form/Form\";\r\nimport { makeStyles, useTheme } from \"@mui/styles\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  img: {\r\n    width: \"70%\",\r\n    display: \"block\",\r\n    margin: \"auto\",\r\n  },\r\n  main: {\r\n    minHeight: 500,\r\n  },\r\n}));\r\nconst Main = (props) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <Grid container alignItems=\"center\" className={classes.main}>\r\n        <Grid item sm={6}>\r\n          <Typography variant=\"h2\" color=\"initial\">\r\n            Image Sentiment Analysis Based on text\r\n          </Typography>\r\n          <Box mt={2}>\r\n            <Typography variant=\"subtitle1\" color=\"initial\">\r\n              Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias\r\n              iste totam non vero repudiandae provident inventore omnis iusto\r\n              minus odio, facere, eligendi in, deleniti dicta asperiores fuga\r\n              maiores dolore deserunt!\r\n            </Typography>\r\n            <a className=\"check-btn\" href=\"\">\r\n              Check now\r\n            </a>\r\n          </Box>\r\n        </Grid>\r\n        <Grid item sm={6}>\r\n          <img src={Img} className={classes.img} alt=\"\" />\r\n        </Grid>\r\n      </Grid>\r\n      <Form />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","E:\\image\\Sentiment-analysis-Web\\src\\Containers\\Form\\Form.jsx",["30","31","32","33","34","35","36","37"],"import { useEffect, useState } from \"react\";\r\nimport UploadImg from \"../../assests/upload.png\";\r\nimport { makeStyles, useTheme } from \"@mui/styles\";\r\nimport { CircularProgress, Grid, Typography } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport axios from \"axios\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  img: {\r\n    width: \"70%\",\r\n    display: \"block\",\r\n    margin: \"auto\",\r\n  },\r\n  main: {\r\n    minHeight: 600,\r\n  },\r\n  uploadedImg: {\r\n    width: \"100%\",\r\n    maxHeight: 360,\r\n  },\r\n}));\r\nconst Form = (props) => {\r\n  const [state, setState] = useState({\r\n    loading: false,\r\n    curImg: null,\r\n    imgFile: null,\r\n    curRes: null,\r\n    oldRes: [],\r\n  });\r\n  const classes = useStyles();\r\n\r\n  const selectImgHandler = (event) => {\r\n    if (event.target.files && event.target.files[0]) {\r\n      let img = event.target.files[0];\r\n      setState({\r\n        ...state,\r\n        curImg: URL.createObjectURL(img),\r\n        imgFile: img,\r\n      });\r\n    }\r\n  };\r\n  const getResults = (event) => {\r\n    setState({\r\n      ...state,\r\n      loading: true,\r\n    });\r\n    const formData = new FormData();\r\n    formData.append(\"image\", state.imgFile);\r\n    axios({\r\n      url: \"http://127.0.0.1:8000/api/sentiment/v1/upload/\",\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n      data: formData,\r\n    })\r\n      .then((res) => {\r\n        setState({\r\n          ...state,\r\n          curRes: res.data.result,\r\n          loading: false,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  const newImage = () => {\r\n    setState({\r\n      loading: false,\r\n      curImg: null,\r\n      imgFile: null,\r\n      curRes: null,\r\n      oldRes: [...state.oldRes, { img: state.curImg, res: state.curRes }],\r\n    });\r\n  };\r\n  const change = () => {\r\n    setState({\r\n      ...state,\r\n      curImg: null,\r\n      imgFile: null,\r\n      curRes: null,\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <Grid container alignItems=\"center\" className={classes.main}>\r\n        <Grid item sm={6}>\r\n          {state.curImg ? (\r\n            <>\r\n              <img src={state.curImg} className={classes.uploadedImg} alt=\"\" />\r\n              <Box mt={2}>\r\n                {state.loading ? (\r\n                  <CircularProgress />\r\n                ) : (\r\n                  <>\r\n                    <button onClick={getResults} className=\"analyse-btn\">\r\n                      Analyse\r\n                    </button>\r\n                    {state.curRes ? (\r\n                      <button onClick={newImage} className=\"analyse-btn\">\r\n                        Test new Image\r\n                      </button>\r\n                    ) : null}\r\n                    <button onClick={change} className=\"analyse-btn change\">\r\n                      Change\r\n                    </button>\r\n                  </>\r\n                )}\r\n              </Box>\r\n            </>\r\n          ) : (\r\n            <div className=\"upload\">\r\n              <div>\r\n                <input\r\n                  type=\"file\"\r\n                  name=\"img\"\r\n                  onChange={selectImgHandler}\r\n                  className=\"upload-input\"\r\n                />\r\n                <img src={UploadImg} alt=\"\" />\r\n                <span className=\"upload-btn\">upload Image</span>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </Grid>\r\n        <Grid item sm={6}>\r\n          {state.loading ? (\r\n            <>\r\n              <Grid\r\n                container\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n                className={classes.loader}\r\n              >\r\n                <Box>\r\n                  <Grid container alignItems=\"center\" justifyContent=\"center\">\r\n                    <CircularProgress />\r\n                  </Grid>\r\n                  <Typography variant=\"h6\" color=\"initial\">\r\n                    Waiting for results\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n            </>\r\n          ) : (\r\n            <div className=\"result\">\r\n              <h3>Ananlysis Result</h3>\r\n              <div\r\n                className={`tab ${state.curRes == \"positive\" ? \"active\" : \"\"}`}\r\n              >\r\n                Positive\r\n              </div>\r\n              <div\r\n                className={`tab ${state.curRes == \"negative\" ? \"active\" : \"\"}`}\r\n              >\r\n                Negative\r\n              </div>\r\n              <div\r\n                className={`tab ${state.curRes == \"random\" ? \"active\" : \"\"}`}\r\n              >\r\n                Random\r\n              </div>\r\n            </div>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {state.oldRes.map((res, index) => {\r\n        return (\r\n          <Grid\r\n            key={index}\r\n            container\r\n            alignItems=\"center\"\r\n            className={classes.main}\r\n          >\r\n            <Grid item sm={6}>\r\n              <img src={res.img} className={classes.uploadedImg} alt=\"\" />\r\n            </Grid>\r\n            <Grid item sm={6}>\r\n              <div className=\"result\">\r\n                <div className={`tab ${res.res == \"positive\" ? \"active\" : \"\"}`}>\r\n                  Positive\r\n                </div>\r\n                <div className={`tab ${res.res == \"negative\" ? \"active\" : \"\"}`}>\r\n                  Negative\r\n                </div>\r\n                <div className={`tab ${res.res == \"random\" ? \"active\" : \"\"}`}>\r\n                  Random\r\n                </div>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n",{"ruleId":"38","severity":1,"message":"39","line":3,"column":22,"nodeType":"40","messageId":"41","endLine":3,"endColumn":30},{"ruleId":"42","severity":1,"message":"43","line":33,"column":13,"nodeType":"44","endLine":33,"endColumn":46},{"ruleId":"38","severity":1,"message":"45","line":1,"column":10,"nodeType":"40","messageId":"41","endLine":1,"endColumn":19},{"ruleId":"38","severity":1,"message":"39","line":3,"column":22,"nodeType":"40","messageId":"41","endLine":3,"endColumn":30},{"ruleId":"46","severity":1,"message":"47","line":150,"column":48,"nodeType":"48","messageId":"49","endLine":150,"endColumn":50},{"ruleId":"46","severity":1,"message":"47","line":155,"column":48,"nodeType":"48","messageId":"49","endLine":155,"endColumn":50},{"ruleId":"46","severity":1,"message":"47","line":160,"column":48,"nodeType":"48","messageId":"49","endLine":160,"endColumn":50},{"ruleId":"46","severity":1,"message":"47","line":182,"column":48,"nodeType":"48","messageId":"49","endLine":182,"endColumn":50},{"ruleId":"46","severity":1,"message":"47","line":185,"column":48,"nodeType":"48","messageId":"49","endLine":185,"endColumn":50},{"ruleId":"46","severity":1,"message":"47","line":188,"column":48,"nodeType":"48","messageId":"49","endLine":188,"endColumn":50},"no-unused-vars","'useTheme' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]